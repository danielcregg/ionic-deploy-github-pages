name: Deploy Ionic App to GitHub Pages

# Trigger on push to main branch or manual workflow dispatch
on:
  push:
    branches: ["main"]
    paths-ignore:
      - '**/*.md'
      - '**/*.MD'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:

# Required permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Environment variables used across the workflow
env:
  NODE_VERSION: '18'
  # Add configuration for handling different Angular configurations
  ANGULAR_CONFIG: 'production'

# Prevent concurrent deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # Setup phase
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract repository name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Detect Ionic project directory
        id: find-ionic
        run: |
          APP_PATH=$(find . -type f -name ionic.config.json -exec dirname {} \; | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "No ionic.config.json found, using root directory"
            APP_PATH="."
          fi
          # Validate that necessary files exist
          if [ ! -f "$APP_PATH/package.json" ]; then
            echo "Error: package.json not found in $APP_PATH"
            exit 1
          fi
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
          # Also store the absolute path for caching
          echo "PACKAGE_JSON_PATH=$(realpath $APP_PATH/package-lock.json)" >> $GITHUB_ENV

      # Dependencies installation phase
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.PACKAGE_JSON_PATH }}

      - name: Install dependencies
        working-directory: ${{ env.APP_PATH }}
        run: npm ci

      - name: Install Ionic CLI
        run: npm install -g @ionic/cli

      # Build phase
      - name: Build Ionic application
        working-directory: ${{ env.APP_PATH }}
        run: |
          # Create or update the copy-base-href.js file
          cat > copy-base-href.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // Read the index.html
          const indexPath = path.join(__dirname, 'www', 'index.html');
          let content = fs.readFileSync(indexPath, 'utf-8');
          
          // Add base href if not present
          if (!content.includes('<base href=')) {
            content = content.replace('<head>', '<head>\n    <base href="/">');
          }
          
          // Ensure proper base href value
          content = content.replace(
            /<base href=".*?">/,
            `<base href="/${process.env.REPO_NAME}/">`
          );
          
          // Add script for routing fallback
          if (!content.includes('type="text/javascript">window.location.href')) {
            const script = `
            <script type="text/javascript">
              // Handle GitHub Pages routing fallback
              (function() {
                const path = window.location.pathname.slice(1);
                const baseHref = '/${process.env.REPO_NAME}/';
                if (!path.startsWith(baseHref.slice(1))) return;
                const route = path.slice(baseHref.length - 1);
                if (route && !route.includes('.')) {
                  window.location.href = baseHref;
                }
              })();
            </script>`;
            content = content.replace('</head>', script + '\n  </head>');
          }
          
          fs.writeFileSync(indexPath, content);
          EOF
          
          # Build the app
          ionic build --configuration=$ANGULAR_CONFIG -- --base-href /${{ env.REPO_NAME }}/
          
          # Run the script to ensure proper routing
          node copy-base-href.js

      # Validation phase
      - name: Verify build output
        run: |
          if [ ! -d "${{ env.APP_PATH }}/www" ]; then
            echo "Error: Build output directory not found"
            exit 1
          fi

      # Deployment phase
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5
        with:
          enablement: pages

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '${{ env.APP_PATH }}/www'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4