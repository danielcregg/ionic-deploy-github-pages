name: Deploy Ionic App to GitHub Pages

# Workflow Triggers
on:
  push:
    branches: ["main"]
    paths-ignore:
      - 'LICENSE'
      - '.gitignore'
      - 'README.md'
      - '**.md'  # Ignore all markdown files
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '18'
  # Increase performance of npm/node
  NODE_OPTIONS: '--max_old_space_size=4096'
  NPM_CONFIG_LOGLEVEL: 'error'  # Reduce npm logs
  IONIC_CLI_SSL_REJECT_UNAUTHORIZED: '0'  # Skip SSL cert validation for faster installs

# Prevent concurrent deployments and cancel in-progress runs
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    name: Build and Deploy
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      # OPTIMIZATION: Use shallow clone and sparse checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            src
            package.json
            package-lock.json
            ionic.config.json
            angular.json

      # OPTIMIZATION: Combine environment setup steps
      - name: Setup environment and detect project
        id: setup
        shell: bash
        run: |
          # Set basic environment variables
          echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
          
          # Find Ionic project directory and validate
          APP_PATH=$(find . -type f -name ionic.config.json -exec dirname {} \; | head -n 1)
          if [[ -z "$APP_PATH" ]]; then
            echo "::error::No ionic.config.json found in repository"
            exit 1
          fi
          
          # Set APP_PATH for other steps
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
          
          # Detect and set project type
          if [[ -f "$APP_PATH/src/app/app.config.ts" ]] && grep -q "bootstrapApplication" "$APP_PATH/src/main.ts" 2>/dev/null; then
            echo "PROJECT_TYPE=standalone" >> $GITHUB_ENV
            PROJECT_TYPE="standalone"
          else
            echo "PROJECT_TYPE=ngmodule" >> $GITHUB_ENV
            PROJECT_TYPE="ngmodule"
          fi
          
          # Output debug info
          echo "Repository: ${GITHUB_REPOSITORY##*/}"
          echo "Project directory: $APP_PATH"
          echo "Project type: $PROJECT_TYPE"
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"

      # OPTIMIZATION: Enhanced caching strategy
      - name: Setup Node.js with caching
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # OPTIMIZATION: Parallel installation with performance flags
      - name: Install dependencies
        shell: bash
        run: |
          cd ${{ env.APP_PATH }}
          
          # Install Ionic CLI globally in parallel
          npm install -g @ionic/cli --no-audit --no-fund &
          IONIC_PID=$!
          
          # Install project dependencies with performance optimizations
          npm ci \
            --prefer-offline \
            --no-audit \
            --no-fund \
            --ignore-scripts \
            --production=false
          
          # Wait for Ionic CLI installation
          wait $IONIC_PID

      # OPTIMIZATION: Streamlined build process
      - name: Build Ionic application
        working-directory: ${{ env.APP_PATH }}
        env:
          # Optimize Angular build
          NG_BUILD_PARALLEL: 'true'
          NG_BUILD_CACHE: 'true'
        run: |
          echo "üèóÔ∏è Starting optimized build..."
          
          # Build with production optimizations
          ionic build \
            --configuration=production \
            --verbose=false \
            -- \
            --base-href=/${{ env.REPO_NAME }}/ \
            --aot \
            --build-optimizer \
            --optimization \
            --progress=false || {
              echo "‚ùå Build failed"
              exit 1
            }
          
          cd www
          
          # OPTIMIZATION: Combine file operations
          echo "‚öôÔ∏è Setting up routing..."
          cp index.html 404.html
          
          # Add routing handlers more efficiently
          for file in 404.html index.html; do
            sed -i '/<head>/a\
            <script>\
              // GitHub Pages routing handler\
              (function() {\
                var redirect = sessionStorage.redirect;\
                delete sessionStorage.redirect;\
                if (redirect && redirect != location.href) {\
                  history.replaceState(null, null, redirect);\
                }\
                \
                var l = location.href;\
                if (l.indexOf("?") > -1) {\
                  sessionStorage.redirect = l.substr(0, l.indexOf("?"));\
                }\
              })();\
            </script>' $file
          done
          
          echo "‚úÖ Build completed successfully"

      # OPTIMIZATION: Quick build verification
      - name: Verify build
        run: |
          [ -d "${{ env.APP_PATH }}/www" ] || { echo "‚ùå Build missing"; exit 1; }
          echo "üìä Build size: $(du -sh ${{ env.APP_PATH }}/www | cut -f1)"

      # DEPLOYMENT: Streamlined GitHub Pages deployment
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '${{ env.APP_PATH }}/www'
          retention-days: 1

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        timeout-minutes: 5

      - name: Deployment status
        if: always()
        shell: bash
        run: |
          if [[ "${{ steps.deployment.outcome }}" == "success" ]]; then
            echo "‚úÖ Site available at: ${{ steps.deployment.outputs.page_url }}"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi