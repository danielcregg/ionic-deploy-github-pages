name: Deploy Ionic App to GitHub Pages

on:
  push:
    branches: ["main"]
    paths-ignore:
      - 'LICENSE'
      - '.gitignore'
      - 'README.md'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'ionic-gh-pages'
  # Added for npm/Node.js performance
  NODE_OPTIONS: '--max_old_space_size=4096'
  NPM_CONFIG_LOGLEVEL: 'error'  # Reduce npm log noise

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    name: Build and Deploy
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Extract repository and environment info
        id: env-setup
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"

      - name: Detect Ionic project directory and type
        id: find-ionic
        run: |
          APP_PATH=$(find . -type f -name ionic.config.json -exec dirname {} \; | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "‚ùå Error: No ionic.config.json found"
            exit 1
          fi
          
          # Validate project structure
          if [ ! -f "$APP_PATH/package.json" ]; then
            echo "‚ùå Error: package.json not found in $APP_PATH"
            exit 1
          fi
          
          # Detect if project is standalone by checking app.config.ts and main.ts
          if [ -f "$APP_PATH/src/app/app.config.ts" ] && grep -q "bootstrapApplication" "$APP_PATH/src/main.ts"; then
            echo "ANGULAR_TYPE=standalone" >> $GITHUB_ENV
            echo "üì¶ Detected standalone Angular project (found app.config.ts and bootstrapApplication)"
          else
            echo "ANGULAR_TYPE=ngmodule" >> $GITHUB_ENV
            echo "üì¶ Detected NgModule-based Angular project"
          fi
          
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
          echo "PACKAGE_JSON_PATH=$(realpath $APP_PATH/package-lock.json)" >> $GITHUB_ENV
          echo "üìÇ Ionic app path: $APP_PATH"

      - name: Setup Node.js and NPM cache
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'  # Improved cache path

      # Optimized dependency installation
      - name: Install dependencies
        run: |
          # Install Ionic CLI globally with performance flags
          npm install -g @ionic/cli --no-audit --no-fund &
          IONIC_PID=$!
          
          cd ${{ env.APP_PATH }}
          # Install project dependencies with performance optimizations
          npm ci \
            --prefer-offline \
            --no-audit \
            --no-fund \
            --production=false
          
          wait $IONIC_PID

      # Rest of the workflow remains unchanged...
      - name: Build Ionic application
        working-directory: ${{ env.APP_PATH }}
        run: |
          echo "üèóÔ∏è Starting build process..."
          
          # Set build command based on project type
          if [ "${{ env.ANGULAR_TYPE }}" = "standalone" ]; then
            BUILD_CMD="ionic build --configuration=production -- --base-href /${{ env.REPO_NAME }}/"
          else
            BUILD_CMD="ionic build --configuration=production -- --base-href /${{ env.REPO_NAME }}/"
          fi
          
          echo "üî® Using build command: $BUILD_CMD"
          eval $BUILD_CMD || {
            echo "‚ùå Build failed"
            exit 1
          }
          
          cd www
          
          echo "‚öôÔ∏è Setting up GitHub Pages routing..."
          cp index.html 404.html
          
          sed -i '/<head>/a\
          <!-- GitHub Pages 404 handler -->\
          <script>\
            (function() {\
              var redirect = sessionStorage.redirect;\
              delete sessionStorage.redirect;\
              if (redirect && redirect != location.href) {\
                history.replaceState(null, null, redirect);\
              }\
            })();\
          </script>' 404.html
          
          sed -i '/<head>/a\
          <!-- Route state preservation -->\
          <script>\
            (function() {\
              var l = location.href;\
              if (l.indexOf("?") > -1) {\
                sessionStorage.redirect = l.substr(0, l.indexOf("?"));\
              }\
            })();\
          </script>' index.html
          
          echo "‚úÖ Build completed successfully"

      - name: Verify build output
        run: |
          if [ ! -d "${{ env.APP_PATH }}/www" ]; then
            echo "‚ùå Error: Build output directory not found"
            exit 1
          fi
          echo "üìä Build size: $(du -sh ${{ env.APP_PATH }}/www | cut -f1)"

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5
        with:
          enablement: pages

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '${{ env.APP_PATH }}/www'
          retention-days: 1

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        timeout-minutes: 5

      - name: Deployment status
        if: always()
        shell: bash
        run: |
          DEPLOY_OUTCOME="${{ steps.deployment.outcome }}"
          if [[ "$DEPLOY_OUTCOME" == "success" ]]; then
            echo "‚úÖ Deployment successful"
            echo "üåç Site available at: ${{ steps.deployment.outputs.page_url }}"
            exit 0
          else
            echo "‚ùå Deployment failed"
            echo "Deployment outcome: $DEPLOY_OUTCOME"
            exit 1
          fi