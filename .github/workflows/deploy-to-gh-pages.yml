name: Deploy Ionic App to GitHub Pages

on:
  push:
    branches: ["main"]
    paths-ignore:
      - 'LICENSE'
      - '.gitignore'
      - 'README.md'
      - '**.md'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'ionic-gh-pages'
  NODE_OPTIONS: '--max_old_space_size=4096'
  NPM_CONFIG_LOGLEVEL: 'error'
  NG_BUILD_PARALLEL: 'true'
  NG_BUILD_CACHE: 'true'
  BUILD_PATH: 'www'

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    name: Build and Deploy
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Extract repository and environment info
        id: env-setup
        shell: bash
        run: |
          {
            echo "REPO_NAME=${GITHUB_REPOSITORY##*/}"
            echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S)"
          } >> $GITHUB_ENV
          echo "Node $(node -v), NPM $(npm -v)"

      - name: Detect Ionic project directory and type
        id: find-ionic
        shell: bash
        run: |
          # Find and validate Ionic project
          APP_PATH=$(find . -type f -name ionic.config.json -exec dirname {} \; | head -n 1)
          if [[ -z "$APP_PATH" ]]; then
            echo "::error::No ionic.config.json found in repository"
            exit 1
          fi
          
          # Required project files check
          required_files=("package.json" "angular.json" "ionic.config.json")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$APP_PATH/$file" ]]; then
              echo "::error::Required file $file not found in $APP_PATH"
              exit 1
            fi
          done
          
          # Detect project type
          if [[ -f "$APP_PATH/src/app/app.config.ts" ]] && grep -q "bootstrapApplication" "$APP_PATH/src/main.ts"; then
            PROJECT_TYPE="standalone"
          else
            PROJECT_TYPE="ngmodule"
          fi
          
          {
            echo "APP_PATH=$APP_PATH"
            echo "PROJECT_TYPE=$PROJECT_TYPE"
            echo "PACKAGE_JSON_PATH=$(realpath $APP_PATH/package-lock.json)"
          } >> $GITHUB_ENV
          
          echo "✓ Ionic project detected at: $APP_PATH"
          echo "✓ Project type: $PROJECT_TYPE"

      - name: Setup Node.js and NPM cache
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        id: install
        shell: bash
        run: |
          echo "::group::Installing dependencies"
          
          # Install Ionic CLI globally with performance flags
          npm install -g @ionic/cli --no-audit --no-fund &
          IONIC_PID=$!
          
          cd ${{ env.APP_PATH }}
          # Install project dependencies with optimizations
          npm ci \
            --prefer-offline \
            --no-audit \
            --no-fund \
            --production=false
          
          wait $IONIC_PID
          echo "::endgroup::"

      - name: Build Ionic application
        id: build
        working-directory: ${{ env.APP_PATH }}
        shell: bash
        run: |
          echo "::group::Building application"
          
          # Build with production optimizations
          ionic build \
            --configuration=production \
            --verbose=false \
            -- \
            --base-href=/${{ env.REPO_NAME }}/ \
            --aot \
            --build-optimizer \
            --optimization \
            --progress=false || {
              echo "::error::Build failed"
              exit 1
            }
          
          # Quick build verification
          if [[ ! -d "${{ env.BUILD_PATH }}" ]]; then
            echo "::error::Build directory not found"
            exit 1
          fi
          
          cd ${{ env.BUILD_PATH }}
          
          # Setup routing with error checking
          echo "Setting up routing handlers..."
          if [[ ! -f "index.html" ]]; then
            echo "::error::index.html not found in build output"
            exit 1
          fi
          
          cp index.html 404.html
          
          # Add routing scripts to both files
          for file in 404.html index.html; do
            sed -i '/<head>/a\
            <script>\
              (function() {\
                var redirect = sessionStorage.redirect;\
                delete sessionStorage.redirect;\
                if (redirect && redirect != location.href) {\
                  history.replaceState(null, null, redirect);\
                }\
                var l = location.href;\
                if (l.indexOf("?") > -1) {\
                  sessionStorage.redirect = l.substr(0, l.indexOf("?"));\
                }\
              })();\
            </script>' $file || {
                echo "::error::Failed to add routing script to $file"
                exit 1
              }
          done
          
          echo "✓ Build completed successfully"
          echo "::endgroup::"
          
          # Output build size for monitoring
          echo "BUILD_SIZE=$(du -sh . | cut -f1)" >> $GITHUB_ENV

      - name: Verify build for deployment
        id: verify
        shell: bash
        run: |
          echo "::group::Verifying build output"
          if [[ ! -d "${{ env.APP_PATH }}/${{ env.BUILD_PATH }}" ]]; then
            echo "::error::Build output directory not found"
            exit 1
          fi
          echo "✓ Build output verified (size: ${{ env.BUILD_SIZE }})"
          echo "::endgroup::"

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5
        with:
          enablement: pages

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '${{ env.APP_PATH }}/${{ env.BUILD_PATH }}'
          retention-days: 1

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
        timeout-minutes: 5

      - name: Deployment status
        if: always()
        shell: bash
        run: |
          if [[ "${{ steps.deploy.outcome }}" == "success" ]]; then
            echo "✓ Deployment successful"
            echo "::notice title=Deployed Site::${{ steps.deploy.outputs.page_url }}"
          else
            echo "::error::Deployment failed"
            exit 1
          fi